"""
Django settings for LIFEAID project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os
import environ
import firebase_admin
from firebase_admin import credentials

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

### Setting up environment variables using django-environ
env = environ.Env()

# Read the .env file
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=False)

ALLOWED_HOSTS = [
    '192.168.0.103',
    '127.0.0.1',
    '5749-103-109-53-5.in.ngrok.io',
    '10.164.98.2'
]
# ALLOWED_HOSTS = ['mobile view', 'local host','ngrok -- keeps on changing']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'hospital.apps.HospitalConfig',
    'hospital_admin.apps.HospitalAdminConfig',
    'doctor.apps.DoctorConfig',
    'pharmacy.apps.PharmacyConfig',
    'sslcommerz.apps.SslcommerzConfig',
    'widget_tweaks',
    'rest_framework',
    'ChatApp.apps.ChatappConfig',
    'debug_toolbar',
    # 'firebase_testing.apps.FirebaseTestingConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

INTERNAL_IPS = [
    "127.0.0.1",
]

ROOT_URLCONF = 'healthstack.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'healthstack.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Dhaka'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'
MEDIA_URL = '/images/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'static/images')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

### SSLCOMMERZ Environment Variables
# VARIABLES should be in capital letters.
STORE_ID = env('STORE_ID')
STORE_PASSWORD = env('STORE_PASSWORD')
STORE_NAME = env('STORE_NAME')

### Mailtrap Environment Variables
SMTP_HOST = env('SMTP_HOST')
SMTP_PORT = env.int('SMTP_PORT')  # Ensure SMTP_PORT is an integer
SMTP_USER = env('SMTP_USER')
SMTP_PASSWORD = env('SMTP_PASSWORD')

# EMAIL Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = SMTP_HOST
EMAIL_PORT = SMTP_PORT
EMAIL_HOST_USER = SMTP_USER
EMAIL_HOST_PASSWORD = SMTP_PASSWORD
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False


# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'hospital.User'


# SESSION AGE 45 Minutes
SESSION_COOKIE_AGE = 45 * 60  # 45 minutes in seconds
SESSION_SAVE_EVERY_REQUEST = True

# ------------------------------------------------------------------------
# Firebase Configuration
# ------------------------------------------------------------------------

# Firebase Admin SDK Setup
# Ensure you have set the following environment variables in your .env file:
# FIREBASE_PROJECT_ID=lifeaid-f8e30
# FIREBASE_CLIENT_EMAIL=firebase-adminsdk-kyj6l@lifeaid-f8e30.iam.gserviceaccount.com
# FIREBASE_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCu+TwqBWB7A7EH\n...-----END PRIVATE KEY-----\n"
# FIREBASE_PRIVATE_KEY_ID=5e5bb66f3025c456eb8a6614dec3763b6c399597
# FIREBASE_CLIENT_ID=107135676390734747924
# FIREBASE_AUTH_URI=https://accounts.google.com/o/oauth2/auth
# FIREBASE_TOKEN_URI=https://oauth2.googleapis.com/token
# FIREBASE_AUTH_PROVIDER_X509_CERT_URL=https://www.googleapis.com/oauth2/v1/certs
# FIREBASE_CLIENT_X509_CERT_URL=https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-kyj6l%40lifeaid-f8e30.iam.gserviceaccount.com
# FIREBASE_UNIVERSE_DOMAIN=googleapis.com

# FIREBASE_PROJECT_ID = env('FIREBASE_PROJECT_ID')
# FIREBASE_CLIENT_EMAIL = env('FIREBASE_CLIENT_EMAIL')
# FIREBASE_PRIVATE_KEY = env('FIREBASE_PRIVATE_KEY').replace('\\n', '\n')
# FIREBASE_PRIVATE_KEY_ID = env('FIREBASE_PRIVATE_KEY_ID')
# FIREBASE_CLIENT_ID = env('FIREBASE_CLIENT_ID')
# FIREBASE_AUTH_URI = env('FIREBASE_AUTH_URI')
# FIREBASE_TOKEN_URI = env('FIREBASE_TOKEN_URI')
# FIREBASE_AUTH_PROVIDER_X509_CERT_URL = env('FIREBASE_AUTH_PROVIDER_X509_CERT_URL')
# FIREBASE_CLIENT_X509_CERT_URL = env('FIREBASE_CLIENT_X509_CERT_URL')
# FIREBASE_UNIVERSE_DOMAIN = env('FIREBASE_UNIVERSE_DOMAIN')

# Initialize Firebase Admin SDK only if it hasn't been initialized yet
# if not firebase_admin._apps:
#     try:
#         firebase_credentials = credentials.Certificate({
#             "type": "service_account",
#             "project_id": FIREBASE_PROJECT_ID,
#             "private_key_id": FIREBASE_PRIVATE_KEY_ID,
#             "private_key": FIREBASE_PRIVATE_KEY,
#             "client_email": FIREBASE_CLIENT_EMAIL,
#             "client_id": FIREBASE_CLIENT_ID,
#             "auth_uri": FIREBASE_AUTH_URI,
#             "token_uri": FIREBASE_TOKEN_URI,
#             "auth_provider_x509_cert_url": FIREBASE_AUTH_PROVIDER_X509_CERT_URL,
#             "client_x509_cert_url": FIREBASE_CLIENT_X509_CERT_URL,
#             "universe_domain": FIREBASE_UNIVERSE_DOMAIN,
#         })
#         firebase_admin.initialize_app(firebase_credentials)
#     except Exception as e:
#         print(f"Error initializing Firebase: {e}")

# ------------------------------------------------------------------------
# End of Firebase Configuration
# ------------------------------------------------------------------------
